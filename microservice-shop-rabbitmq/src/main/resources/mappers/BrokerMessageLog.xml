<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wolf.mq.mapper.BrokerMessageLogMapper">

  <resultMap id="BaseResultMap" type="com.wolf.mq.model.BrokerMessageLog">
    <id column="message_id" property="messageId" jdbcType="VARCHAR" />
    <result column="domain_name" property="domainName" jdbcType="VARCHAR" />
    <result column="message_secne" property="messageSecne" jdbcType="VARCHAR" />
    <result column="message" property="message" jdbcType="VARCHAR" />
    <result column="exchange_name" property="exchangeName" jdbcType="VARCHAR" />
    <result column="routing_key_name" property="routingKeyName" jdbcType="VARCHAR" />
    <result column="try_count" property="tryCount" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="next_retry" property="nextRetry" jdbcType="TIMESTAMP" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>

  <insert id="insert" parameterType="com.wolf.mq.model.BrokerMessageLog">
    insert into t_broker_message_log(message_id, domain_name, message_secne, message, exchange_name, routing_key_name, try_count, status, next_retry, create_time, update_time)
    values(
      #{messageId, jdbcType=VARCHAR},
      #{domainName, jdbcType=VARCHAR},
      #{messageSecne, jdbcType=VARCHAR},
      #{message, jdbcType=VARCHAR},
      #{exchangeName, jdbcType=VARCHAR},
      #{routingKeyName, jdbcType=VARCHAR},
      #{tryCount, jdbcType=INTEGER},
      #{status, jdbcType=VARCHAR},
      #{nextRetry, jdbcType=TIMESTAMP},
      #{createTime, jdbcType=TIMESTAMP},
      #{updateTime, jdbcType=TIMESTAMP}
      )
  </insert>

  <delete id="delete" parameterType="string">
    delete from t_broker_message_log where message_id = #{messageId, jdbcType=VARCHAR}
  </delete>

  <update id="update" parameterType="com.wolf.mq.model.BrokerMessageLog">
    update t_broker_message_log
    set
      domain_name = #{domainName, jdbcType=VARCHAR},
      message_secne = #{messageSecne, jdbcType=VARCHAR},
      message = #{message, jdbcType=VARCHAR},
      exchange_name = #{exchangeName, jdbcType=VARCHAR},
      routing_key_name = #{routingKeyName, jdbcType=VARCHAR},
      try_count = #{tryCount, jdbcType=INTEGER},
      status = #{status, jdbcType=VARCHAR},
      next_retry = #{nextRetry, jdbcType=TIMESTAMP},
      update_time = #{updateTime, jdbcType=TIMESTAMP}
    where message_id = #{messageId, jdbcType=VARCHAR}
  </update>

  <select id="selectById" parameterType="string" resultMap="BaseResultMap">
    select
      message_id,
      domain_name,
      message_secne,
      message,
      exchange_name,
      routing_key_name,
      status, next_retry,
      create_time,
      update_time
    from t_broker_message_log
    where message_id = #{messageId, jdbcType=VARCHAR}
  </select>

  <select id="selectListByParam" parameterType="map" resultMap="BaseResultMap">
    select
      message_id,
      domain_name,
      message_secne,
      message,
      exchange_name,
      routing_key_name,
      status, next_retry,
      create_time,
      update_time
    from t_broker_message_log
    <where>
      <if test="keyword != null and  keyword != '' ">
        and (
          domain_name like CONCAT('%',#{keyword, jdbcType=VARCHAR},'%')
          or message_secne like CONCAT('%',#{keyword, jdbcType=VARCHAR},'%')
          or exchange_name like CONCAT('%',#{keyword, jdbcType=VARCHAR},'%')
          or routing_key_name like CONCAT('%',#{keyword, jdbcType=VARCHAR},'%')
        )
      </if>

      <if test="start != null and start != ''">
        and create_time >= #{start, jdbcType=TIMESTAMP}
      </if>

      <if test="end != null and end != ''">
        and create_time lt;= #{end, jdbcType=TIMESTAMP}
      </if>
    </where>

    order by create_time desc

  </select>

  <select id="query4StatusAndTimeoutMessage" resultMap="BaseResultMap">
    select
      message_id,
      domain_name,
      message_secne,
      message,
      exchange_name,
      routing_key_name,
      try_count,
      status,
      next_retry,
      create_time,
      update_time
    from t_broker_message_log
    where status = '0' and next_retry &lt;= sysdate()
  </select>

  <update id="update4RetrySend" >
    update t_broker_message_log
    set
      try_count = try_count + 1,
      update_time = #{updateTime, jdbcType=TIMESTAMP}
    where message_id = #{messageId, jdbcType=VARCHAR}
  </update>

  <update id="changeBrokerMessageLogStatus">
    update t_broker_message_log
    set
      status = #{status, jdbcType=VARCHAR},
      update_time = #{updateTime, jdbcType=TIMESTAMP}
    where message_id = #{messageId, jdbcType=VARCHAR}
  </update>
</mapper>